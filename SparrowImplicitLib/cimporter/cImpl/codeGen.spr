import parserIf
import nodes

package meta
    import meta.sparrowNodes
    import meta.featherNodes
    import meta.compiler

[ct]
fun genCImporter(rootNode: NodePtr): meta.AstNode
    return Impl.genCImpSystem(rootNode)

package Impl
    [ct]
    var nullNode: meta.AstNode

    [ct]
    fun genCImpSystem(rootNode: NodePtr): meta.AstNode
        var loc: Location
        var resNodes: Vector(meta.AstNode);

        //TODO - Find a way to check for ptr/arrays in AST
        resNodes += meta.mkImportName(loc, meta.mkStringLiteral(loc, "std/ptr.spr"), nullNode, "")
        resNodes += meta.mkImportName(loc, meta.mkStringLiteral(loc, "std/staticArray.spr"), nullNode, "")

        if rootNode isSet
            for node: NodePtr = rootNode->children.all()
                resNodes += genExtDecl(node)
        return meta.mkNodeList(loc, resNodes.all)

    [ct]
    fun genExtDecl(node: NodePtr): meta.AstNode
        if node->kind == "VarDecl"
            cout << "Generating VarDecl" << endl
            return genVarDecl(node)
        else if node->kind == "FunDecl"
            cout << "Generating FunDecl" << endl
            return genFunDecl(node)
        else if node->kind == "StructDecl"
            cout << "Generating StructDecl" << endl
            return genStructDecl(node)
        else if node->kind == "Typedef"
            cout << "Generating Typedef" << endl
            return genTypedef(node)

    [ct]
    fun genTypedef(node: NodePtr): meta.AstNode
        var usingDecl: meta.AstNode
        var type = genType(node->children.at(0))
        usingDecl = meta.mkSprUsing(node->loc, node->name.asStringRef, type)

        return usingDecl

    [ct]
    fun genVarDecl(node: NodePtr): meta.AstNode
        var varDecl: meta.AstNode
        var init = nullNode
        var type = genType(node->children.at(0))
        varDecl = meta.mkSprVariable(node->loc, node->name.asStringRef, type, init)

        return varDecl

    [ct]
    fun genType(node: NodePtr): meta.AstNode
        var type: meta.AstNode

        if node->kind.asStringRef == "PtrType"
            return meta.mkOperatorCall(node->loc, genType(node->children.at(0)), "Ptr", nullNode)
        //else if node->kind.asStringRef == "ArrayType"
        else if node->kind.asStringRef == "PrimitiveType"
            if node->name.asStringRef == "Void"
                return meta.mkIdentifier(node->loc, "Byte")

        return meta.mkIdentifier(node->loc, node->name asStringRef)

    [ct]
    fun genFunDecl(node: NodePtr): meta.AstNode
        var loc = node->loc
        var name = node->name asStringRef
        var paramsNode = genFuncParams(node->children.at(2))
        var body = nullNode
        var retType = nullNode
        if node->children.at(0)->name.asStringRef != "Void"
            retType = genType(node->children.at(0))

        var funDecl = meta.mkSprFunction(loc, name, paramsNode, retType, body, nullNode);
        
        // TODO - native modifier
        /* var mods = meta.mkNodeList(loc, meta.AstNodeRange(), true)
        var native = meta.mkFunApplication(loc, 
            meta.mkIdentifier(loc, "native"), 
            addToNodeList(meta.AstNode(), meta.mkStringLiteral(loc, name))
            )
        mods = meta.addToNodeList(mods, native)
        return meta.mkModifiers(loc, funDecl, mods) */
        return funDecl

    [ct]
    fun genFuncParams(node: NodePtr): meta.AstNode
        if node->children.size() == 0
            return meta.AstNode()

        var locParams = node->children.at(0)->loc
        var params : meta.AstNode
        for param : NodePtr = node->children.all()
            var loc = param->loc
            var name = param->name asStringRef
            var type = genType(param->children.at(0))
            params = meta.addToNodeList(params, meta.mkSprParameter(loc, name, type, nullNode))

        return params

    [ct]
    fun genStructDecl(node: NodePtr): meta.AstNode
        var name = node->name asStringRef
        var loc = node->loc
        var vars = meta.mkNodeList(loc, meta.AstNodeRange(), true)

        // TODO - If decls list is empty
        for v : NodePtr = node->children.at(0)->children.all()
            var loc = v->loc
            var name = v->name asStringRef
            var type = genType(v->children.at(0))
            vars = meta.addToNodeList(vars, meta.mkSprVariable(loc, name, type, nullNode))

        return meta.mkSprClass(loc, name, nullNode, nullNode, nullNode, vars)
