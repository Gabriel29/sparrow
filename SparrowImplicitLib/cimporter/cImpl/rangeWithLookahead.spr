import std.tuple
import std.vector
import std.ranges


/// Helper class that provides lookup functionality over a Range
///
/// This will hold an internal buffer of elements from the given range
/// If there are not enough items in the source range we give back the default-constructed element
[rtct]
class RangeWithLookahead(baseRangeType: Type) if Range(#$baseRangeType)
    using RetType = -@(baseRangeType.RetType)

    var source: baseRangeType
    var buffer: Vector(RetType)

    fun ctor(src: baseRangeType)
        this.source = src
        this.buffer ctor
        this.buffer reserve 10

        // Always have at least one element in the buffer
        if !!source
            buffer += (source++)
            
[rtct]       
fun isEmpty(this: @RangeWithLookahead): Bool = buffer.isEmpty
[rtct]
fun front(this: @RangeWithLookahead): RetType = buffer.front
[rtct]
fun popFront(this: @RangeWithLookahead)
    buffer remove 0
    // Add a new element in the buffer if the buffer is empty
    if (buffer.isEmpty) && !!source
        buffer += (source++)
[rtct]
fun peek(this: @RangeWithLookahead, n: UInt): RetType
    // If not enough elements in the buffer, add them now
    while n >= buffer.size && !!source
        buffer += (source++)
    if n < buffer.size
        return buffer(n)
    else
        return RetType() // not enough elements in the source
[rtct]
fun hasLessThan(this: @RangeWithLookahead, n: UInt): Bool
    // Try to fill the buffer with the amount of elements
    while n >= buffer.size && !!source
        buffer += (source++)
    // Check if we have enough elements in the buffer
    return n >= buffer.size
