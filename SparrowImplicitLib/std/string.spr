module std.string;

import contiguousMemoryRange(ContiguousMemoryRange);
import ranges(rangeSize);
import rawPtr(RawPtr);

// TODO: Make sure that we have the same performance for Strings that we would have for basic char arrays
// TODO: Can we implement this in terms of Vector?
// TODO: Can we implement a VectorDetail(Type, InnerSpace), and implement fun Vector(type) = VectorBase(type, 0)

/// String class that has ownership of the characters
[rtct] class String
{
    using ValueType = Char;
    using ValuePassType = Char;
    using RangeType = StringRef;

    fun ctor
    {
        _begin.ctor();
        _end.ctor();
        _endOfStore.ctor();
    }
    fun ctor(size: SizeType)
    {
        _begin       ctor _PtrType.alloc(size+1);
        _end         ctor _begin.advance(DiffType(size));
        _endOfStore  ctor _end;
        _end.value() = Char(0);
    }
    fun ctor(count: SizeType, ch: Char)
    {
        ctor(count);
        memset(_begin.bytePtr(), reinterpretCast(@Byte, ch), count);
    }
    fun ctor(other: @String)
    {
        var size = other size;
        ctor(size);
        memcpy(_begin.bytePtr(), other._begin.bytePtr(), size);
    }
    [convert] fun ctor(other: @StringRef)
    {
        var size = other size;
        ctor(size);
        memcpy(_begin.bytePtr(), other.begin, size);
    }
    fun ctor(_begin, _end: _PtrType)
    {
        var size = _end.diff(_begin);
        ctor(size);
        memcpy(this._begin.bytePtr(), _begin.bytePtr(), size);
    }
    fun ctor(range: Range) if typeOf(range) != String
    {
        ctor(rangeSize(range));
        var i=0;
        for ch = range
        {
            _begin.advance(DiffType(i++)).value() = ch;
        }
    }

    [rt] fun ctorFromCt(src: String ct)
    {
        this.ctor(src.asStringRef());
    }

    fun dtor
    {
        _begin.freePtr();
    }

    fun swap(other: @String)
    {
        this._begin      swap    other._begin;
        this._end        swap    other._end;
        this._endOfStore swap    other._endOfStore;
    }

    fun asStringRef             = StringRef(_begin.bytePtr(), _end.bytePtr());


    fun size: SizeType          = _end.diff(_begin);
    fun isEmpty                 = _begin == _end;
    fun capacity: SizeType      = _endOfStore.diff(_begin);

    fun at(index: SizeType)     = _begin.advance(DiffType(index)).value();
    fun ()(index: SizeType)     = _begin.advance(DiffType(index)).value();
    fun front                   = _begin.value();
    fun back                    = _end.advance(-1).value();
    fun all                     = RangeType(_begin.bytePtr, _end.bytePtr);
    fun subrange(index: SizeType, num: SizeType): RangeType \
                                = RangeType(_begin.advance(DiffType(index)).bytePtr, _begin.advance(DiffType(index + num)).bytePtr);

    fun pushBack(value: Char)
    {
        if ( _end == _endOfStore )
        {
            var t = 2 * capacity();

            if ( t < 2 )
                t = 2;
            reserve(t);
        }
        _end.value().ctor(value);
        _end = _end.advance();
    }
    fun +=(value: Char) { pushBack(value); }

    fun popBack()
    {
        _end = _end advance -1;
        _end.value() dtor;
    }

    fun resize(n: SizeType)
    {
        var oldSize = size();

        if ( n == oldSize )
            return;

        if ( n < oldSize )
        {
            var newEnd = _begin.advance(DiffType(n));

            while _end != newEnd
            {
                _end = _end.advance(-1);
                _end.value().dtor();
            }
        }
        else
        {
            reserve(n);

            var newEnd = _begin.advance(DiffType(n));

            while _end != newEnd
            {
                _end.value().ctor();
                _end = _end.advance();
            }
        }
    }

    fun reserve(n: SizeType)
    {
        var curCapacity = capacity();

        if ( n <= curCapacity )
            return;

        if ( n < _initialCapacity )
            n = _initialCapacity;
        if ( n <_growthFactor*curCapacity )
            n = SizeType(_growthFactor*curCapacity);

        var curSize = size();

        _begin.reallocPtr(n);
        _end = _begin.advance(DiffType(curSize));
        _endOfStore = _begin.advance(DiffType(n));
    }

    fun clear()
    {
        remove(RangeType(_begin.bytePtr, _end.bytePtr));
    }

    fun insertBefore(value: ValuePassType, pos: RangeType)
    {
        var posCount = _frontPtr(pos).diff(_begin);

        reserve(size() + 1);

        var p = _end.advance(-1);
        var q = _begin.advance(posCount - DiffType(1));

        while p != q ; p = p.advance(-1)
        {
            p.advance().value().ctor(p.value());
            p.value().dtor();
        }
        p.advance().value().ctor(value);
        _end = _end.advance();
    }

    fun insertBefore(range: Range, pos: RangeType)
    {
        var n = range.size();
        var index = _frontPtr(pos).diff(_begin);

        reserve(size() + n);

        var p = _end.advance(-1);
        var q = _begin.advance(index - DiffType(1));

        while p != q ; p = p.advance(-1)
        {
            p.advance(DiffType(n)).value().ctor(p.value());
            p.value().dtor();
        }
        p = p.advance();
        while !range.isEmpty()
        {
            p.value().ctor(range.front());
            p = p.advance();
            range.popFront();
        }
        _end = _end.advance(DiffType(n));
    }

    fun insertAfter(value: ValuePassType, pos: RangeType)
    {
        insertBefore(value, RangeType(_backPtr(pos).bytePtr, _end.bytePtr));
    }

    fun insertAfter(range: Range, pos: RangeType)
    {
        insertBefore(range, RangeType(_backPtr(pos).bytePtr, _end.bytePtr));
    }

    fun append(range: Range)
    {
        insertBefore(range, RangeType(_end.bytePtr, _end.bytePtr));
    }
    fun append(value: ValuePassType)
    {
        insertBefore(value, RangeType(_end.bytePtr, _end.bytePtr));
    }

    fun remove(range: RangeType)
    {
        var rSize = range.size();
        var rBegin = _frontPtr(range);
        var rEnd = rBegin.advance(DiffType(rSize));

        while rEnd != _end
        {
            rBegin.value().dtor();
            rBegin.value().ctor(rEnd.value());
            rBegin = rBegin.advance();
            rEnd = rEnd.advance();
        }
        _end = rBegin;
    }

    fun remove(index: SizeType)
    {
        var r = all();

        r.popFront(index);
        r.popBack(size() - index - 1);
        remove(r);
    }

    fun =(other: @String): @String
    {
        var tmp = other;
        tmp.swap(this);
        return this;
    }

    fun ==(other: @String): Bool
    {
        if ( size() != other.size() )
            return false;

        var i: SizeType = 0;
        var s = size();

        while i < s ; i++
        {
            if ( at(i) != other.at(i) )
                return false;
        }
        return true;
    }

    fun !=(other: @String): Bool = !(this == other);

    fun assign(range: Range)
    {
        clear();
        for v = range
            pushBack(v);
    }

    fun >>(os: @OutStream)
    {
        os << asStringRef();
    }

    [static] fun _frontPtr(s: StringRef) = _PtrType.fromBytePtr(s.begin);
    [static] fun _backPtr(s: StringRef) = _PtrType.fromBytePtr(s.end);

    using _initialCapacity = SizeType(16);
    using _growthFactor = 1.5;
    using _PtrType = RawPtr(Char);

    var _begin, _end, _endOfStore: _PtrType;
}

// TODO
[autoCt] fun + (x,y: String): String
{
    var sz1 = x.size();
    var sz2 = y.size();
    var res: String = sz1 + sz2;
    memcpy(res._begin.bytePtr(), x._begin.bytePtr(), sz1);
    memcpy(res._begin.advance(sz1).bytePtr(), y._begin.bytePtr(), sz2);
    return res;
}

[autoCt] fun + (x: String, y: StringRef): String
{
    var sz1 = x.size();
    var sz2 = y.size();
    var res: String = sz1 + sz2;
    memcpy(res._begin.bytePtr(), x._begin.bytePtr(), sz1);
    memcpy(res._begin.advance(sz1).bytePtr(), y.begin, sz2);
    return res;
}

//[autoCt] fun + (x: String, y: Char): String
//{
//    var sz1 = x.size();
//    var sz2 = sizeOf(y);
//    var res: String = sz1 + sz2;
//    memcpy(res._begin, x._begin, sz1);
//    memcpy(ptrAdd(res._begin, sz1), reinterpretCast(@Byte, y), sz2);

//    return res;
//}


[rtct] fun intToString(x: Int): String
{
    var buf: static_buffer(12);
    StringImpl.intToCString(x, reinterpretCast(@Char, buf));
    return String(StringRef.fromCString(reinterpretCast(@Char, buf)));
}
[rtct] fun ulongToString(x: ULong): String
{
    var buf: static_buffer(16);
    StringImpl.ulongToCString(x, reinterpretCast(@Char, buf));
    return String(StringRef.fromCString(reinterpretCast(@Char, buf)));
}

// TODO

[rtct] class StringOutputStream
{
    var result: String;

    fun <<<(s: @String)       { result.append(s.all()); }
    fun <<<(s: @StringRef)    { result.append(ContiguousMemoryRange(Char)(RawPtr(Char).fromBytePtr(s.begin), RawPtr(Char).fromBytePtr(s.end))); }
    fun <<<(x: Char)          { result.append(x); }
    fun <<<(x: Int)           { result.append(intToString(x).all()); }
    fun <<<(x: ULong)         { result.append(ulongToString(x).all()); }
    fun <<<(x: Double)        { result.append(ulongToString(ULong(x)).all()); } // Not properly supported
}

[rtct]
    fun toString() = String();
    fun toString(a1: AnyType): String {
        var s: StringOutputStream;
        s << a1;
        return s.result;
    }
    fun toString(a1, a2: AnyType): String {
        var s: StringOutputStream;
        s << a1 << a2;
        return s.result;
    }
    fun toString(a1, a2, a3: AnyType): String {
        var s: StringOutputStream;
        s << a1 << a2 << a3;
        return s.result;
    }
    fun toString(a1, a2, a3, a4: AnyType): String {
        var s: StringOutputStream;
        s << a1 << a2 << a3 << a4;
        return s.result;
    }
    fun toString(a1, a2, a3, a4, a5: AnyType): String {
        var s: StringOutputStream;
        s << a1 << a2 << a3 << a4 << a5;
        return s.result;
    }
    fun toString(a1, a2, a3, a4, a5, a6: AnyType): String {
        var s: StringOutputStream;
        s << a1 << a2 << a3 << a4 << a5 << a6;
        return s.result;
    }
    fun toString(a1, a2, a3, a4, a5, a6, a7: AnyType): String {
        var s: StringOutputStream;
        s << a1 << a2 << a3 << a4 << a5 << a6 << a7;
        return s.result;
    }

package StringImpl
{
    [rtct, native("_Int_to_CString")] fun intToCString(x: Int, buffer: @Char);
    [rtct, native("_ULong_to_CString")] fun ulongToCString(x: ULong, buffer: @Char);
}
